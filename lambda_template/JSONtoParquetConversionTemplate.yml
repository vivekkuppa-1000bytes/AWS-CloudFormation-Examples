AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Specification template describing your function.

Parameters:
  # Parameters for customization
  RoleNamePlaceholder:
    Description: Name for the role
    Type: String
  TopicNamePlaceholder:
    Description: Name for the SNS topic
    Type: String
  FunctionNamePlaceholder:
    Description: Name for the Lambda function
    Type: String
  BucketNamePlaceholder:
    Description: Name for the S3 bucket
    Type: String
  PrefixPlaceholder:
    Description: Prefix for the S3 key filter
    Type: String
  SuffixPlaceholder:
    Description: Suffix for the S3 key filter
    Type: String
    Default: .json
  EmailPlaceholder:
    Description: Email for the SNS topic
    Type: String

Resources:
  # AWS SNS Topic Resource
  SNSTopic:
    Type: AWS::SNS::Topic 
    Properties:
      # Assigning topic name
      TopicName: !Ref TopicNamePlaceholder
      # Defining subscription for the topic
      Subscription:
      - Endpoint: !Ref EmailPlaceholder
        Protocol: "email"

  # IAM Role for Lambda Execution Resource
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Assigning role name
      RoleName: !Ref RoleNamePlaceholder
      # Defining trust policy allowing AWS services to assume this role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      # Attaching managed policy to the role
      Policies:
      - PolicyName: "lambda-s3-sns"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${BucketNamePlaceholder}/*"
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !GetAtt SNSTopic.TopicArn

  # AWS Lambda Function Resource
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Assigning function name
      FunctionName: !Ref FunctionNamePlaceholder
      # Assigning handler function
      Handler: index.convert_json_to_parquet
      # Assigning runtime environment
      Runtime: python3.12
      # Assigning IAM role for execution
      Role: !GetAtt LambdaExecutionRole.Arn
      # Inline code for the Lambda function
      InlineCode: |
        import json
        import pandas as pd
        import boto3
        from io import BytesIO

        # Function to convert JSON file to Parquet file
        def convert_json_to_parquet(event, context):
          s3 = boto3.client('s3')
          bucket_name = event['Records'][0]['s3']['bucket']['name']
          json_file_key = event['Records'][0]['s3']['object']['key']
          response = s3.get_object(Bucket=bucket_name, Key=json_file_key)
          json_content = response['Body'].read()
          json_data = json.loads(json_content)
          df = pd.DataFrame(json_data)
          parquet_buffer = BytesIO()
          df.to_parquet(parquet_buffer, index=False)
          parquet_file_key = json_file_key.rsplit('.', 1)[0] + '.parquet'
          s3.put_object(Bucket=bucket_name, Key=parquet_file_key, Body=parquet_buffer.getvalue())

      # Adding layers to the function's execution environment
      Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:4"
      Description: A Lambda function that converts a JSON file to a Parquet file.
      MemorySize: 512
      Timeout: 15
      # Configuring event invocation settings
      EventInvokeConfig:
        DestinationConfig:
          # Configuring destination for failed invocations
          OnFailure:
            Type: SNS
            Destination: !GetAtt SNSTopic.TopicArn
          # Configuring destination for successful invocations
          OnSuccess:
            Type: SNS
            Destination: !GetAtt SNSTopic.TopicArn
      # Defining the event that triggers the function
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref S3Bucket
            Events: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref PrefixPlaceholder
                  - Name: suffix
                    Value: !Ref SuffixPlaceholder

  # AWS S3 Bucket Resource
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Assigning bucket name
      BucketName: !Ref BucketNamePlaceholder

Outputs:
  # Outputting ARN of the SNS topic
  TopicArn:
    Description: ARN of the SNS topic
    Value: !Ref SNSTopic
  # Outputting name of the S3 bucket
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket
