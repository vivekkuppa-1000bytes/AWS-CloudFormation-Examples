AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create VPC with public and private subnets, internet gateway, NAT gateway, and deploy Lambda function.

Parameters:
  RoleNamePlaceholder:
    Description: Name for the role
    Type: String
  BucketName:
    Description: Name for the bucket
    Type: String
  FileName:
    Description: Name for the file
    Type: String
  Lambdafunctionname:
    Description: Name for the lambda function
    Type: String
  pythonruntime:
    Description: Python runtime
    Type: String
  vpcname:
    Type: String
    Description: 'vpcname'
    Default: 'vpcname'
  publicsubnetname:
    Type: String  
    Description: 'public-subnet'
    Default: 'public-subnet'
  privatesubnetname:
    Type: String    
    Description: 'private-subnet'  
    Default: 'private-subnet'
  publicroute:
    Type: String
    Description: 'public-route'
    Default: 'public-route'
  privateroute:
    Type: String  
    Description: 'private-route' 
    Default: 'private-route'
  
  VpcCidrBlock:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/24"

Resources:
  # Lambda Execution Role resource definition
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleNamePlaceholder
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  # VPC resource definition
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: !Ref vpcname
  # Internet Gateway resource definition
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  # Public Subnet resource definition
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/25"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Ref publicsubnetname
  # Private Subnet resource definition
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.128/25"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Ref privatesubnetname
  # Attachment of Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Public Route Table resource definition
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref publicroute
  # Private Route Table resource definition
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: !Ref privateroute
  # Public Route resource definition
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  # NAT Gateway resource definition
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
  # Elastic IP resource definition
  ElasticIP:
    Type: AWS::EC2::EIP
  # Private Route resource definition
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway
  # Lambda Layer resource definition
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: requests
      Content: 
        S3Bucket: !Ref BucketName
        S3Key: !Ref FileName
  # Lambda Function resource definition
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref  Lambdafunctionname
      Handler: index.lambda_Handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import csv
          import requests

          def lambda_Handler(event, context):
              # URL of the CSV file
              csv_url = "https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv"
              
              # Make an API call to fetch the CSV file
              response = requests.get(csv_url)
              
              # Check if the API call was successful
              if response.status_code == 200:
                  # Decode the content of the response as text
                  csv_content = response.text
                  
                  # Parse the CSV content
                  csv_data = csv.DictReader(csv_content.splitlines())
                  
                  # Convert CSV data to a list of dictionaries
                  data = [row for row in csv_data]
                  
                  # Print the data read from the CSV file
                  print("Data read from the CSV file:")
                  for row in data:
                      print(row)
                  
                  return {
                      'statusCode': 200,
                      'body': 'Data read and printed successfully!'
                  }
              else:
                  # If the API call failed, print the status code
                  print(f"API call failed with status code: {response.status_code}")
                  
                  return {
                      'statusCode': response.status_code,
                      'body': 'Failed to retrieve data from the CSV API'
                  }
      Runtime: !Ref pythonruntime 
      Timeout: 60
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaSecurityGroup]
        SubnetIds: [!Ref PrivateSubnet]
      Layers:
        - !Ref LambdaLayer
  # Lambda Security Group resource definition
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Lambda function"
      VpcId: !Ref VPC
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
  # Public Subnet Route Table Association resource definition
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet
  # Private Subnet Route Table Association resource definition
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet
